function Brtp = jovian_jrm09_internal_rtp(r_rj, colat_rads, elong_rads)
% Code to calculate the JRM09 model of Jupiter's internal magnetic field model
% Reference: Connerney et al., 2018, https://agupubs.onlinelibrary.wiley.com/doi/abs/10.1002/2018GL077312
%
% Required inputs (System III Spherical, right handed):
%  r_rj       - radial distance, in Rj.
%  colat_rads - colatitude, in radians.                    Value(s) should be 0 <= colat_rads <=  pi.
%  elong_rads - East longitude, right handed, in radians.  Value(s) should be 0 <= elong_rads <= 2pi.
%
% Outputs:
%  B - Spherical Magnetic field vector the JRM09 internal magnetic field model, [Br, Btheta, Bphi], units of nT.
%
% Usage:
% For internal field only: B = jovian_jrm09_internal_rtp(r_rj, colat_rads, elong_rads)
%
% This code was written by Marissa Vogt (mvogt@bu.edu) and Rob Wilson (rob.wilson@lasp.colorado.edu).
% Last updated November 2021.
% It is based on a routine originally written by K. Khurana, translated into IDL by Marissa Vogt in 2009.
% Thanks to Masafumi Imai for providing code for his version of the JRM09 model, which was used to test and validate this code.


%%
% check inputs are same size
N_input = numel(r_rj);
scalar_input = (N_input == 1) ;% scalar or not

% Check inputs r_rj, colat_rads and elong_rads are all numbers, and same size (also scalar or 1D only)
if (~isnumeric(    r_rj  )) || (size(    r_rj  ,2) ~= 1), error('ERROR: First  argument    r_rj    must be a scalar number or 1D column array of numbers'); end
if (~isnumeric(colat_rads)) || (size(colat_rads,2) ~= 1), error('ERROR: Second argument colat_rads must be a scalar number or 1D column array of numbers'); end
if (~isnumeric(elong_rads)) || (size(elong_rads,2) ~= 1), error('ERROR: Third  argument elong_rads must be a scalar number or 1D column array of numbers'); end
if (N_input ~= length(colat_rads)), error('ERROR: First  argument r_rj must be the same size as 2nd argument colat_rads'); end
if (N_input ~= length(elong_rads)), error('ERROR: Second argument r_rj must be the same size as 3rd argument elong_rads'); end
% do this check to be sure that user hasn't got position in km.
if scalar_input
    if (    r_rj   <= 0) || (    r_rj   >= 200 ), error('ERROR: First  argument, Position    r_rj   , must be in units of Rj and >0 and <200 only, and not outside that range (did you use km instead?)'),end
    if (colat_rads <  0) || (colat_rads >  pi  ), error('ERROR: Second argument, Position colat_rads, must be in units of radians and >= 0 and <=   Pi only, and not outside that range (did you use degrees instead?)'),end
    if (elong_rads <  0) || (elong_rads >  pi*2), error('ERROR: Third  argument, Position elong_rads, must be in units of radians and >= 0 and <= 2*Pi only, and not outside that range (did you use degress instead?)'),end
else
    if (min(    r_rj  ) <= -200) || (max(    r_rj  ) >= 200), error('ERROR: First  argument, Position    r_rj   , must be in units of Rj and >-200 and <200 only, and not outside that range (did you use km instead?)'); end
    if (min(colat_rads) <     0) || (max(colat_rads) > pi  ), error('ERROR: Second argument, Position colat_rads, must be in units of radians and >= 0 and <=   Pi only, and not outside that range (did you use degrees instead?)'); end
    if (min(elong_rads) <     0) || (max(elong_rads) > pi*2), error('ERROR: Third  argument, Position elong_rads, must be in units of radians and >= 0 and <= 2*Pi only, and not outside that range (did you use degrees instead?)'); end
end
%%
% Changing inputs to Doubles, and not using input names (so as not to alter inputs, an IDL issue)
r_rj_dbl       = double(    r_rj  );
colat_rads_dbl = double(colat_rads);
elong_rads_dbl = double(elong_rads);

%%
% ============
% Begin hard-coding for JRM09
% Values from Connerney et al. 2020
% See supplemental online information Table S1, https://agupubs.onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1002%2F2018GL077312&file=grl57087-sup-0005-2018GL077312-ds01.txt
% ============
k      = 11; % one more than order

%%
% used IDL function _jovian_jrm09_internal_rjw_setup to copy/paste rec, g and h
% rec, g and h never change - so why calculate them each time?
% rec, g and h are copy/pasted from the IDL code (which includes the
% scripts to generate these values... 
% BUT DELETING INDEX 0 (hence only 3 values on first line of each
rec = [...
                                                                  0,         0.33333333333333331482962,                                 0,  ...
       0.26666666666666666296592,         0.20000000000000001110223,                                 0,         0.25714285714285711748062,  ...
       0.22857142857142856429142,         0.14285714285714284921269,                                 0,         0.25396825396825395415590,  ...
       0.23809523809523808202115,         0.19047619047619046561692,         0.11111111111111110494321,                                 0,  ...
       0.25252525252525254151337,         0.24242424242424243097105,         0.21212121212121212709967,         0.16161616161616162989922,  ...
       0.09090909090909091161414,                                 0,         0.25174825174825177231952,         0.24475524475524476630817,  ...
       0.22377622377622377602968,         0.18881118881118880148406,         0.13986013986013987042689,         0.07692307692307692734701,  ...
                               0,         0.25128205128205127749652,         0.24615384615384616751044,         0.23076923076923078204103,  ...
       0.20512820512820512108831,         0.16923076923076924016343,         0.12307692307692308375522,         0.06666666666666666574148,  ...
                               0,         0.25098039215686274161499,         0.24705882352941177515504,         0.23529411764705882026405,  ...
       0.21568627450980393245317,         0.18823529411764705621124,         0.15294117647058824704942,         0.10980392156862744945656,  ...
       0.05882352941176470506601,                                 0,         0.25077399380804954454049,         0.24767801857585139413409,  ...
       0.23839009287925697067045,         0.22291021671826624639401,         0.20123839009287924906033,         0.17337461300309597866942,  ...
       0.13931888544891640746570,         0.09907120743034056320475,         0.05263157894736841813099,                                 0,  ...
       0.25062656641604008633806,         0.24812030075187968547468,         0.24060150375939848288454,         0.22807017543859647856763,  ...
       0.21052631578947367252397,         0.18796992481203006475354,         0.16040100250626565525636,         0.12781954887218044403241,  ...
       0.09022556390977443108170,         0.04761904761904761640423,                                 0,         0.25051759834368531043580,  ...
       0.24844720496894409644817,         0.24223602484472050999642,         0.23188405797101449556941,         0.21739130434782608092270,  ...
       0.19875776397515526605630,         0.17598343685300207872579,         0.14906832298136646342002,         0.11801242236024844789455,  ...
       0.08281573498964803214939,         0.04347826086956521618454,                                 0,         0.25043478260869567186830,  ...
       0.24869565217391303990624,         0.24347826086956522728677,         0.23478260869565217849875,         0.22260869565217392129775,  ...
       0.20695652173913042792819,         0.18782608695652172614565,         0.16521739130434781595014,         0.13913043478260869734164,  ...
       0.10956521739130434256460,         0.07652173913043477937457,         0.04000000000000000083267,                                 0,  ...
       0.25037037037037035425158,         0.24888888888888888173412,         0.24444444444444443642617,         0.23703703703703704608330,  ...
       0.22666666666666665519436,         0.21333333333333334702608,         0.19703703703703703831174,         0.17777777777777778456247,  ...
       0.15555555555555555802272,         0.13037037037037035869247,         0.10222222222222222820509,         0.07111111111111111104943,  ...
       0.03703703703703703498107,                                 0,         0.25031928480204340692339,         0.24904214559386972371868,  ...
       0.24521072796934864634899,         0.23882503192848020256989,         0.22988505747126436462580,         0.21839080459770116027229,  ...
       0.20434227330779056175381,         0.18773946360153256907033,         0.16858237547892720997744,         0.14687100893997445671957,  ...
       0.12260536398467432317450,         0.09578544061302682322001,         0.06641123882503192910054,         0.03448275862068965469387,  ...
                               0,         0.25027808676307006230388,         0.24916573971078975757720,         0.24582869855394884339717,  ...
       0.24026696329254726425262,         0.23248053392658510341029,         0.22246941045606227760345,         0.21023359288097887009883,  ...
       0.19577308120133482538527,         0.17908787541713014346278,         0.16017797552836485208694,         0.13904338153503892350216,  ...
       0.11568409343715238546402,         0.09010011123470522409473,         0.06229143492769743939430,         0.03225806451612903136272,  ...
                               0,         0.25024437927663734093642,         0.24926686217008797719075,         0.24633431085043988595373,  ...
       0.24144672531769306722538,         0.23460410557184752100568,         0.22580645161290321953906,         0.21505376344086021833668,  ...
       0.20234604105571846188738,         0.18768328445747800570231,         0.17106549364613879427033,         0.15249266862170088310258,  ...
       0.13196480938416421668791,         0.10948191593352883665968,         0.08504398826979471526233,         0.05865102639296188025142,  ...
       0.03030303030303030387138,                                 0,         0.25021645021645022577417,         0.24935064935064935043307,  ...
       0.24675324675324675216537,         0.24242424242424243097105,         0.23636363636363635909454,         0.22857142857142856429142,  ...
       0.21904761904761904656169,         0.20779220779220780590535,         0.19480519480519481456682,         0.18008658008658010030167,  ...
       0.16363636363636363535434,         0.14545454545454544748040,         0.12554112554112553667984,         0.10389610389610390295267,  ...
       0.08051948051948051854332,         0.05541125541125541120735,         0.02857142857142857053643 ];
% BUT DELETING INDEX 0 (hence only 3 values on first line of each
g   = [...
                                                                  0,    410244.70000000001164153218269,    -71498.30000000000291038304567,  ...
   17505.59999999999854480847716,    -98442.49328882319969125092030,     42166.34389756242308067157865,     10046.50000000000000000000000,  ...
 -115711.13977311669441405683756,     30841.14733335159326088614762,     -2142.83839947159822258981876,   -151573.62500000000000000000000,  ...
  -45642.10215250826877309009433,     -9415.35553115892798814456910,    -23183.43100524596593459136784,    -13190.78728838805909617803991,  ...
 -141935.84999999997671693563461,     47619.25007516491314163431525,    124193.04328343032102566212416,    -77191.29987306696421001106501,  ...
   -5769.73075946518656564876437,     -2568.20347420563030027551576,   -300582.97499999997671693563461,    188897.03523126235813833773136,  ...
  176219.39807558275060728192329,   -125279.49167958697944413870573,     14568.18469249509325891267508,      2590.20913175944133399752900,  ...
    5094.72643062895076582208276,     16044.59999999999854480847716,    165497.62303578440332785248756,   -188120.73349108296679332852364,  ...
  -51533.85619684254197636619210,    -79632.08074599411338567733765,     11455.48572598611099238041788,     -7006.09637449074671167181805,  ...
    1921.06723268604082477395423,    505710.56250000005820766091347,    129665.25000000000000000000000,   -375914.50046967255184426903725,  ...
    6366.18842053944717918056995,   -110265.51694787663291208446026,    -12861.08441189933364512398839,    -25680.06972210412277490831912,  ...
   -1835.99981426163253672712017,     -1524.90263109687475662212819,    918443.19531249988358467817307,   -388096.44079238711856305599213,  ...
   28346.79585738653622684068978,    171882.35647868152591399848461,    187708.65848237561294808983803,    -85005.63010931370081380009651,  ...
   31091.84173000367445638403296,     -8649.99331942896606051363051,      3298.44757452672547515248880,     -1203.96883845257525535998866,  ...
 -414889.08398437500000000000000,    488932.02253022126387804746628,    448310.26802277535898610949516,    578200.21502919984050095081329,  ...
  346825.93308208207599818706512,      1204.82452975374712877965067,     74644.73375998696428723633289,      -932.00811829940028019336751,  ...
   23711.52712466476441477425396,      1525.17384009177953885227907,       771.06330156869501024630154,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0 ];
% BUT DELETING INDEX 0 (hence only 3 values on first line of each
h   = [...
                                                                  0,                                 0,     21330.50000000000000000000000,  ...
                               0,    -72793.41890493947721552103758,     16760.36284452099789632484317,                                 0,  ...
 -100910.71037478504877071827650,     81496.28381673301919363439083,    -21775.60208180246991105377674,                                 0,  ...
  177057.11204695011838339269161,    108828.53403772377350833266973,     -1937.07712643301852040167432,       271.47411104698363715215237,  ...
                               0,    461033.11139938322594389319420,     -5756.22459277780399133916944,     29500.89399184978901757858694,  ...
   24092.34750470571452751755714,      6740.87640657726115023251623,                                 0,    274721.00218349619535729289055,  ...
 -158302.75800766979227773845196,      5664.86031229477885062806308,     70239.09162317455047741532326,     -9651.15831540766339458059520,  ...
    2421.05129224630400130990893,                                 0,   -270501.83727851061848923563957,   -317074.53216031729243695735931,  ...
   53925.73158082475129049271345,     66612.60292471760476473718882,    -37360.45546854781423462554812,     -3695.70433387703633343335241,  ...
   -3679.15443532142626281711273,                                 0,   -161525.20312500000000000000000,   -651374.26444599486421793699265,  ...
  384663.57749869779217988252640,    -24380.75866950407362310215831,     40850.84987612628174247220159,    -16793.03281485293700825423002,  ...
    3026.49177465601997027988546,     -1809.49012278727877855999395,                                 0,  -1078776.11541115446016192436218,  ...
 -150349.92758701223647221922874,    472811.32743136369390413165092,   -115925.43081370404979679733515,    103818.65529778851487208157778,  ...
  -12547.38753045641169592272490,     10189.09246170325241109821945,      -542.89372143209163823485142,       954.74582717435089307400631,  ...
                               0,  -1141644.22994741331785917282104,    936694.13928736466914415359497,   -393135.81781678373226895928383,  ...
 -257618.41363149805692955851555,     12129.55247439201775705441833,    -56261.42789238762634340673685,    -40717.73101774691895116120577,  ...
   11552.18924515208345837891102,     -1896.31274843787309691833798,       995.21720307946509365137899,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0,                                 0,  ...
                               0,                                 0,                                 0 ];
%============
% End parts that are hard-coded for JRM09
%============
%%
if scalar_input
    % IDL is 0:k and 1:(k+1), but we don't want index 0, so 1:k and 2:(k+1)
    a         = [0,0,0,0,0,0,0,0, 0, 0, 0]; %= zeros(1,k)
    DINDGEN_k = [1,2,3,4,5,6,7,8, 9,10,11]; %= 1:k, done manually for speed
else
    a         = zeros(N_input,k);
    DINDGEN_k = a;
    for i = 1:k
        DINDGEN_k(:,i) = i;
    end
end

%%
%; Instead of: a = (1/r_rj_dbl).^DINDGEN_kp1;, do the da to end of for loop
da = 1./r_rj_dbl;
a(:,1) = da.*da; % in IDL a[0] = da, and for i = 1:k
for i=2:k
    a(:,i) = a(:,i-1).*da;
end

b = a .* DINDGEN_k;

cos_phi   = cos(elong_rads_dbl);
sin_phi   = sin(elong_rads_dbl);
cos_theta = cos(colat_rads_dbl);
sin_theta = sin(colat_rads_dbl);
not_bk  = (sin_theta >= 0.00001); % = 1e-5 - also see bk both times below
if scalar_input
    %bk = (sin_theta < 0.00001); bk not needed for scalar
    zero_array = 0;
    p   = 1;
    d   = 0;
    bbr = 0;
    bbt = 0;
    bbf = 0;
    x = 0;
    y = 1;
else
    bk = (sin_theta < 0.00001);
    zero_array = zeros(N_input,1);
    p   =        ones( N_input,1);
    d   = zero_array;
    bbr = zero_array;
    bbt = zero_array;
    bbf = zero_array;
    x = zero_array; % 0s
    y = p; % 1s
end

for m = 1:k
    bm  = (m ~= 1);
    if bm
        m_minus_1 = m - 1;
        w = x;
        x = w.*cos_phi + y.*sin_phi;
        y = y.*cos_phi - w.*sin_phi;
    end
    q = p;
    z = d;
    bi = zero_array;
    p2 = zero_array;
    d2 = zero_array;
    for n = m:k
        mn = n*(n-1)/2 + m;
        w  = g(mn)*y + h(mn)*x;
        % the next two commented out lines assume scalar inputs
        %;IF (abs(p2) LT 1e-38) THEN p2 = 0d ;% RJW - Why have these lines?
        %;IF (abs(q)  LT 1e-38) THEN q  = 0d ;% RJW - Why have these lines?
        bbr = bbr + b(:,n).*w.*q;
        bbt = bbt - a(:,n).*w.*z;
        if bm
            if scalar_input
                if not_bk
                    bi = bi + a(  n)  * (g(mn)*x-h(mn)*y)  * q;
                else
                    bi = bi + a(  n)  * (g(mn)*x-h(mn)*y)  * z;
                end
            else
                qq = q;
                ind = find(bk);
                if numel(ind)
                    qq(ind) = z(ind);
                end
                bi = bi + a(:,n) .* (g(mn)*x-h(mn)*y) .* qq;
            end
        end
        dp = cos_theta.*z - sin_theta.*q - rec(mn)*d2;
        pm = cos_theta.*q                - rec(mn)*p2;
        d2 = z;
        p2 = q;
        z = dp;
        q = pm;
    end
    d = sin_theta.*d + cos_theta.*p;
    p = sin_theta.*p;
    if bm
        bi  = bi  * m_minus_1;
        bbf = bbf + bi;
    end
end

%;br = bbr ;% These don't change again
%;bt = bbt ;% These don't change again
if scalar_input
    if not_bk
        bf = bbf/sin_theta;
    else
        if (cos_theta >= 0)
            bf =  bbf;
        else
            bf = -bbf;
        end
    end
else
    bf = bbf;% set size of array and do the 3rd case
    ind = find(bk & (cos_theta <  0));
    if numel(ind)
        bf(ind) = -bbf(ind);
    end
    ind = find(~bk); % find(bk == 0)
    if numel(ind)
        bf(ind) = bbf(ind)./sin_theta(ind);
    end
end

%%
%;Brtp = [br,bt,bf];
Brtp = [bbr,bbt,bf];
